const nodeConfigSchemas = {
  // Core Nodes
  Node: {},
  Flow: {},
  AsyncNode: {},
  AsyncFlow: {},
  AsyncBatchNode: {},
  AsyncParallelBatchNode: {},
  AgentNode: {
    goal: { type: 'text', label: 'Agent Goal' },
  },
  EmbeddingNode: {
    text: { type: 'text', label: 'Text to Embed' },
    model: { type: 'text', label: 'Ollama Model', defaultValue: 'nomic-embed-text' },
    baseUrl: { type: 'text', label: 'Ollama Base URL', defaultValue: 'http://localhost:11434' },
  },
  SemanticMemoryNode: {
    action: { type: 'select', label: 'Action', options: ['store', 'retrieve'] },
    content: { type: 'textarea', label: 'Content (for store)' },
    query: { type: 'text', label: 'Query (for retrieve)' },
    id: { type: 'text', label: 'Memory ID' },
    metadata: { type: 'json', label: 'Metadata (JSON)' },
    memoryPath: { type: 'text', label: 'Memory Path', defaultValue: './semantic_memories' },
    embeddingModel: { type: 'text', label: 'Embedding Model', defaultValue: 'nomic-embed-text' },
    embeddingBaseUrl: { type: 'text', label: 'Embedding Base URL', defaultValue: 'http://localhost:11434' },
    topK: { type: 'number', label: 'Top K (for retrieve)', defaultValue: 5 },
  },
  MemoryNode: {
    action: { type: 'select', label: 'Action', options: ['store', 'retrieve'] },
    content: { type: 'textarea', label: 'Content (for store)' },
    query: { type: 'text', label: 'Query (for retrieve)' },
    id: { type: 'text', label: 'Memory ID' },
    memoryPath: { type: 'text', label: 'Memory Path', defaultValue: './agent_memories' },
  },
  TransformNode: {
    input: { type: 'json', label: 'Input Data' }, // Label simplified, type remains json
    transformFunction: { type: 'textarea', label: 'Transform Function (JS)', placeholder: '(data) => data.map(x => x * 2)' },
  },
  CodeInterpreterNode: {
    code: { type: 'textarea', label: 'Python Code' },
    timeout: { type: 'number', label: 'Timeout (ms)', defaultValue: 5000 },
    args: { type: 'json', label: 'Arguments (JSON Array)' },
    requireConfirmation: { type: 'boolean', label: 'Require Confirmation' },
    interpreterPath: { type: 'text', label: 'Interpreter Path' },
  },
  UserInputNode: {
    prompt: { type: 'text', label: 'Prompt' },
  },
  InteractiveInputNode: {
    prompt: { type: 'text', label: 'Prompt' },
    title: { type: 'text', label: 'Title' },
    defaultValue: { type: 'text', label: 'Default Value' },
  },
  IteratorNode: {
    items: { type: 'json', label: 'Items (JSON Array)' },
    flow: { type: 'text', label: 'Subflow Name' },
  },
  SubFlowNode: {
    flow: { type: 'text', label: 'Subflow Name' },
    shared: { type: 'json', label: 'Shared Data (JSON)' },
  },
  SchedulerNode: {
    action: { type: 'select', label: 'Action', options: ['start', 'stop'] },
    schedule: { type: 'text', label: 'Schedule (Cron or ms)' },
    flow: { type: 'text', label: 'Flow Name' },
    flowParams: { type: 'json', label: 'Flow Parameters (JSON)' },
    id: { type: 'text', label: 'Schedule ID' },
  },

  // Integrated Nodes
  ReadFileNode: {
    filePath: { type: 'text', label: 'File Path' },
  },
  WriteFileNode: {
    filePath: { type: 'text', label: 'File Path' },
    content: { type: 'textarea', label: 'Content' },
  },
  AppendFileNode: {
    filePath: { type: 'text', label: 'File Path' },
    content: { type: 'textarea', label: 'Content' },
  },
  ListDirectoryNode: {
    directoryPath: { type: 'text', label: 'Directory Path' },
  },
  ShellCommandNode: {
    command: { type: 'textarea', label: 'Command' },
  },
  HttpRequestNode: {
    url: { type: 'text', label: 'URL' },
    method: { type: 'select', label: 'Method', options: ['GET', 'POST', 'PUT', 'DELETE'] },
    headers: { type: 'json', label: 'Headers (JSON)' },
    body: { type: 'textarea', label: 'Body' },
    auth: { type: 'json', label: 'Auth (JSON)' },
  },
  DeepSeekLLMNode: {
    apiKey: { type: 'text', label: 'API Key' },
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  AgentDeepSeekLLMNode: {
    apiKey: { type: 'text', label: 'API Key' },
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  OpenAILLMNode: {
    apiKey: { type: 'text', label: 'API Key' },
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  AgentOpenAILLMNode: {
    apiKey: { type: 'text', label: 'API Key' },
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  GeminiLLMNode: {
    apiKey: { type: 'text', label: 'API Key' },
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  OllamaLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model', defaultValue: 'llama2' },
    baseUrl: { type: 'text', label: 'Base URL', defaultValue: 'http://localhost:11434' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  AgentOllamaLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model', defaultValue: 'llama2' },
    baseUrl: { type: 'text', label: 'Base URL', defaultValue: 'http://localhost:11434' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  HuggingFaceLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    hfToken: { type: 'text', label: 'Hugging Face Token' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_new_tokens: { type: 'number', label: 'Max New Tokens', defaultValue: 500 },
    baseUrl: { type: 'text', label: 'Base URL', defaultValue: 'https://router.huggingface.co/v1' },
  },
  AgentHuggingFaceLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    hfToken: { type: 'text', label: 'Hugging Face Token' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_new_tokens: { type: 'number', label: 'Max New Tokens', defaultValue: 500 },
    baseUrl: { type: 'text', label: 'Base URL', defaultValue: 'https://router.huggingface.co/v1' },
  },
  OpenRouterLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    apiKey: { type: 'text', label: 'API Key' },
    siteUrl: { type: 'text', label: 'Site URL' },
    siteTitle: { type: 'text', label: 'Site Title' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  AgentOpenRouterLLMNode: {
    prompt: { type: 'textarea', label: 'Prompt' },
    model: { type: 'text', label: 'Model' },
    apiKey: { type: 'text', label: 'API Key' },
    siteUrl: { type: 'text', label: 'Site URL' },
    siteTitle: { type: 'text', label: 'Site Title' },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
    max_tokens: { type: 'number', label: 'Max Tokens' },
  },
  DuckDuckGoSearchNode: {
    query: { type: 'text', label: 'Query' },
  },
  GoogleSearchNode: {
    query: { type: 'text', label: 'Query' },
    apiKey: { type: 'text', label: 'API Key' },
    cseId: { type: 'text', label: 'CSE ID' },
  },
  WebScraperNode: {
    url: { type: 'text', label: 'URL' },
  },
  BrowserControlNode: {
    action: { type: 'select', label: 'Action', options: ['goto', 'click', 'type', 'screenshot'] },
    url: { type: 'text', label: 'URL (for goto)' },
    selector: { type: 'text', label: 'Selector (for click/type)' },
    text: { type: 'text', label: 'Text (for type)' },
    path: { type: 'text', label: 'Path (for screenshot)' },
  },
  WebSocketsNode: {
    url: { type: 'text', label: 'WebSocket URL' },
    message: { type: 'textarea', label: 'Message to Send' },
    action: { type: 'select', label: 'Action', options: ['connect', 'send', 'receive', 'close'] },
  },
  WebHookNode: {
    port: { type: 'number', label: 'Port', defaultValue: 5666 },
    path: { type: 'text', label: 'Path', defaultValue: '/webhook' },
    sharedSecret: { type: 'text', label: 'Shared Secret' },
    responseStatus: { type: 'number', label: 'Response Status', defaultValue: 200 },
    responseBody: { type: 'json', label: 'Response Body (JSON)' },
  },
  DataExtractorNode: {
    input: { type: 'textarea', label: 'Input Content' },
    type: { type: 'select', label: 'Input Type', options: ['html', 'json', 'text'] },
    selector: { type: 'text', label: 'Selector (HTML)' },
    jsonPath: { type: 'text', label: 'JSON Path (JSON)' },
    regex: { type: 'text', label: 'Regex (Text)' },
    group: { type: 'number', label: 'Regex Group' },
  },
  PDFProcessorNode: {
    filePath: { type: 'text', label: 'File Path' },
    action: { type: 'select', label: 'Action', options: ['extract_text', 'extract_images'] },
    outputDir: { type: 'text', label: 'Output Directory' },
    pageRange: { type: 'json', label: 'Page Range (JSON)' },
    password: { type: 'text', label: 'Password' },
  },
  SpreadsheetNode: {
    action: { type: 'select', label: 'Action', options: ['read', 'write', 'read_range', 'write_range', 'append_rows', 'delete_rows', 'insert_rows', 'add_sheet', 'rename_sheet', 'format_cells'] },
    filePath: { type: 'text', label: 'File Path' },
    sheetName: { type: 'text', label: 'Sheet Name' },
    data: { type: 'json', label: 'Data (JSON)' },
    headerRow: { type: 'boolean', label: 'Header Row' },
    range: { type: 'text', label: 'Range (A1 Notation)' },
    startRow: { type: 'number', label: 'Start Row' },
    numRows: { type: 'number', label: 'Number of Rows' },
    newSheetName: { type: 'text', label: 'New Sheet Name' },
    formats: { type: 'json', label: 'Formats (JSON)' },
  },
  DataValidationNode: {
    data: { type: 'json', label: 'Data to Validate (JSON)' },
    schema: { type: 'json', label: 'JSON Schema (JSON)' },
    schemaPath: { type: 'text', label: 'Schema Path' },
    action: { type: 'select', label: 'Action', options: ['validate'] },
  },
  GitNode: {
    action: { type: 'select', label: 'Action', options: ['clone', 'add', 'commit', 'push', 'pull'] },
    repoPath: { type: 'text', label: 'Repository Path' },
    remoteUrl: { type: 'text', label: 'Remote URL' },
    files: { type: 'json', label: 'Files (JSON Array)' },
    message: { type: 'textarea', label: 'Commit Message' },
    branch: { type: 'text', label: 'Branch' },
    remote: { type: 'text', label: 'Remote' },
  },
  GitHubNode: {
    action: { type: 'select', label: 'Action', options: ['create_issue', 'get_issue', 'list_issues'] },
    owner: { type: 'text', label: 'Owner' },
    repo: { type: 'text', label: 'Repository' },
    issueNumber: { type: 'number', label: 'Issue Number' },
    title: { type: 'text', label: 'Title' },
    body: { type: 'textarea', label: 'Body' },
    assignees: { type: 'json', label: 'Assignees (JSON Array)' },
    labels: { type: 'json', label: 'Labels (JSON Array)' },
    state: { type: 'select', label: 'State', options: ['open', 'closed'] },
  },
  GISNode: {
    operation: { type: 'select', label: 'Operation', options: ['geocode', 'reverse_geocode'] },
    address: { type: 'text', label: 'Address (for geocode)' },
    addressSharedKey: { type: 'text', label: 'Shared Key for Address' },
    latitude: { type: 'number', label: 'Latitude (for reverse_geocode)' },
    longitude: { type: 'number', label: 'Longitude (for reverse_geocode)' },
    provider: { type: 'select', label: 'Provider', options: ['openstreetmap', 'google'] },
    apiKey: { type: 'text', label: 'API Key (for Google)' },
  },
  DisplayImageNode: {
    imagePath: { type: 'text', label: 'Image Path' },
  },
  ImageGalleryNode: {
    imagePaths: { type: 'json', label: 'Image Paths (JSON Array)' },
    title: { type: 'text', label: 'Gallery Title' },
    description: { type: 'textarea', label: 'Description' },
    outputDir: { type: 'text', label: 'Output Directory' },
  },
  HardwareInteractionNode: {
    action: { type: 'select', label: 'Action', options: ['write', 'read_line', 'list_ports'] },
    portPath: { type: 'text', label: 'Port Path' },
    baudRate: { type: 'number', label: 'Baud Rate', defaultValue: 9600 },
    dataToWrite: { type: 'textarea', label: 'Data to Write' },
    timeout: { type: 'number', label: 'Timeout (ms)', defaultValue: 5000 },
  },
  SpeechSynthesisNode: {
    text: { type: 'textarea', label: 'Text to Speak' },
    provider: { type: 'select', label: 'Provider', options: ['os', 'google'] },
    voice: { type: 'text', label: 'Voice' },
    outputFilePath: { type: 'text', label: 'Output File Path' },
  },
  MultimediaProcessingNode: {
    action: { type: 'select', label: 'Action', options: ['convert', 'trim', 'extract_audio', 'extract_frame', 'custom'] },
    inputPath: { type: 'text', label: 'Input Path' },
    outputPath: { type: 'text', label: 'Output Path' },
    format: { type: 'text', label: 'Format' },
    startTime: { type: 'text', label: 'Start Time' },
    duration: { type: 'text', label: 'Duration' },
    resolution: { type: 'text', label: 'Resolution' },
    frameTime: { type: 'text', label: 'Frame Time' },
    ffmpegArgs: { type: 'textarea', label: 'FFmpeg Arguments' },
  },
  RemoteExecutionNode: {
    host: { type: 'text', label: 'Host' },
    port: { type: 'number', label: 'Port', defaultValue: 22 },
    username: { type: 'text', label: 'Username' },
    password: { type: 'text', label: 'Password' },
    privateKey: { type: 'textarea', label: 'Private Key' },
    passphrase: { type: 'text', label: 'Passphrase' },
    action: { type: 'select', label: 'Action', options: ['execute_command'] },
    command: { type: 'textarea', label: 'Command' },
    timeout: { type: 'number', label: 'Timeout (ms)', defaultValue: 30000 },
  },
  SystemNotificationNode: {
    message: { type: 'textarea', label: 'Message' },
    title: { type: 'text', label: 'Title' },
    icon: { type: 'text', label: 'Icon Path' },
  },
  StripeNode: {
    action: { type: 'select', label: 'Action', options: ['create_charge', 'get_balance'] },
    apiKey: { type: 'text', label: 'API Key' },
    amount: { type: 'number', label: 'Amount' },
    currency: { type: 'text', label: 'Currency' },
    source: { type: 'text', label: 'Source' },
    description: { type: 'textarea', label: 'Description' },
  },
  HackerNewsNode: {
    action: { type: 'select', label: 'Action', options: ['get_top_stories', 'get_item'] },
    itemId: { type: 'number', label: 'Item ID' },
  },
  SharedStateReaderNode: {
    sharedKey: { type: 'text', label: 'Shared Key to Read' },
  },
  SharedStateWriterNode: {
    key: { type: 'text', label: 'Key to Write' },
    value: { type: 'text', label: 'Value to Write' },
  },
  BranchNode: {
    conditionSource: { type: 'select', label: 'Condition Source', options: ['static', 'sharedState', 'expression'], defaultValue: 'static' },
    conditionValue: { type: 'textarea', label: 'Condition Value/Key', placeholder: 'e.g., true, my_data.status, x > 5' },
    branches: { type: 'json', label: 'Branches (JSON Array)', placeholder: '[{"value": "true", "label": "True Branch"}, {"value": "false", "label": "False Branch"}]' , defaultValue: '[{"value": "default", "label": "Default Branch"}]' },
  },
  CustomLLMNode: {
    provider: { type: 'select', label: 'LLM Provider', options: ['', 'OpenRouter', 'DeepSeek', 'OpenAI', 'Gemini', 'Ollama', 'HuggingFace'] },
    apiUrl: { type: 'text', label: 'API URL' },
    apiKey: { type: 'text', label: 'API Key' },
    model: { type: 'text', label: 'Model' },
    prompt: { type: 'textarea', label: 'Prompt' },
    requestBody: { type: 'json', label: 'Request Body (JSON)' },
    responsePath: { type: 'text', label: 'Response Path' },
    baseUrl: { type: 'text', label: 'Base URL' },
  },
  CustomAgentNode: {
    provider: { type: 'select', label: 'LLM Provider', options: ['OpenRouter', 'DeepSeek', 'OpenAI', 'Gemini', 'Ollama', 'HuggingFace'] },
    apiKey: { type: 'text', label: 'API Key' },
    model: { type: 'text', label: 'Model' },
    baseUrl: { type: 'text', label: 'Base URL' },
    systemPrompt: { type: 'textarea', label: 'Agent System Prompt' },
    goal: { type: 'textarea', label: 'Agent Goal' },
    tools: { type: 'checkbox_list', label: 'Available Tools (JSON Array of Node Names)', options: [
        'DuckDuckGoSearchNode', 'ShellCommandNode', 'ReadFileNode', 'WriteFileNode', 'HttpRequestNode',
        'ScrapeURLNode', 'UserInputNode', 'SemanticMemoryNode', 'TransformNode', 'CodeInterpreterNode',
        'SubFlowNode', 'IteratorNode', 'InteractiveInputNode', 'SystemNotificationNode', 'BrowserControlNode',
        'AppendFileNode', 'MemoryNode', 'GoogleSearchNode', 'WebSocketsNode', 'DataExtractorNode',
        'PDFProcessorNode', 'SpreadsheetNode', 'DataValidationNode', 'GitNode', 'GitHubNode', 'GISNode',
        'DisplayImageNode', 'ImageGalleryNode', 'HardwareInteractionNode', 'SpeechSynthesisNode',
        'MultimediaProcessingNode', 'RemoteExecutionNode', 'StripeNode', 'HackerNewsNode'
      ] },
    maxIterations: { type: 'number', label: 'Max Iterations', defaultValue: 10 },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
  },
  CustomInteractiveAgent: {
    provider: { type: 'select', label: 'LLM Provider', options: ['OpenRouter', 'DeepSeek', 'OpenAI', 'Gemini', 'Ollama', 'HuggingFace'] },
    apiKey: { type: 'text', label: 'API Key' },
    model: { type: 'text', label: 'Model' },
    baseUrl: { type: 'text', label: 'Base URL' },
    systemPrompt: { 
      type: 'textarea', 
      label: 'Agent System Prompt',
      placeholder: 'You are Q, an autonomous agent. Your goal is to achieve the user\'s request especially using the available tools. Available Tools: {tools} You MUST respond with a single JSON object containing "thought" and "tool_calls". Example: {"thought": "I need to ask for user input", "tool_calls": [{"tool": "interactive_input", "parameters": {"prompt": "What is your name?"}}]}. When done, use {"thought": "Task complete", "final_output": "Summary of what was accomplished"}.'
    },
    goal: { type: 'textarea', label: 'Agent Goal' },
    tools: { type: 'checkbox_list', label: 'Available Tools (JSON Array of Node Names)', options: [
        'DuckDuckGoSearchNode', 'ShellCommandNode', 'ReadFileNode', 'WriteFileNode', 'HttpRequestNode',
        'ScrapeURLNode', 'InteractiveInputNode', 'SemanticMemoryNode', 'TransformNode', 'CodeInterpreterNode',
        'SubFlowNode', 'IteratorNode', 'SystemNotificationNode', 'BrowserControlNode',
        'AppendFileNode', 'MemoryNode', 'GoogleSearchNode', 'WebSocketsNode', 'DataExtractorNode',
        'PDFProcessorNode', 'SpreadsheetNode', 'DataValidationNode', 'GitNode', 'GitHubNode', 'GISNode',
        'DisplayImageNode', 'ImageGalleryNode', 'HardwareInteractionNode', 'SpeechSynthesisNode',
        'MultimediaProcessingNode', 'RemoteExecutionNode', 'StripeNode', 'HackerNewsNode'
      ] },
    maxIterations: { type: 'number', label: 'Max Iterations', defaultValue: 10 },
    temperature: { type: 'number', label: 'Temperature', defaultValue: 0.7 },
  }
};

export default nodeConfigSchemas;
